package com.pccw.category.bff.serviceimpl;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.pccw.category.bff.constants.Constants;
import com.pccw.category.bff.dto.Category;
import com.pccw.category.bff.exception.BizCompServiceException;
import com.pccw.category.bff.exception.RestUrlFormationException;
import com.pccw.category.bff.service.CategoryService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class CategoryServiceImpl implements CategoryService{

	@Autowired
	Environment env;

	@Autowired
	RestTemplate restTemplate;
	
	@Override
	public Category createCategory(Category category) {
		Category categoryObj = null;
		try {
			log.debug("Creating new Product Cstegory object in BFF");
			ResponseEntity<Category> productCategoryResponseEntity = restTemplate
					.postForEntity(getURI(null, null), category, Category.class);
			if (productCategoryResponseEntity.getStatusCode() == HttpStatus.CREATED
					&& productCategoryResponseEntity.getBody() != null) {
				categoryObj = productCategoryResponseEntity.getBody();
				log.debug("Returning created  Product Category object" + categoryObj);
			}
		} catch (BizCompServiceException ex) {
			log.error(ex.getMessage(), ex);
			throw ex;
		}
		return categoryObj;
	}

	@Override
	public Category retrieveCategorybyId(Map<String, Object> pathParams, Map<String, Object> queryParams) {
			Category categoryObject = null;
			try {
				log.debug("Retrieving product category object for id: " + pathParams);
				ResponseEntity<Category> productCategoryResponseEntity = restTemplate
						.getForEntity(getURI(pathParams, queryParams), Category.class);
				if (productCategoryResponseEntity.getStatusCode() == HttpStatus.OK
						&& productCategoryResponseEntity.getBody() != null) {
					categoryObject = productCategoryResponseEntity.getBody();
					log.debug("Returning created  Product category object" + categoryObject);
				}
			} catch (BizCompServiceException ex) {
				log.error(ex.getMessage(), ex);
				throw ex;
			}
			return categoryObject;
	}

	@Override
	public String listCategory(Map<String, Object> reqParams) {

		String category = null;
		try {
			ResponseEntity<String> productCategoryResponseEntity = restTemplate.getForEntity(getURI(null, reqParams),
					String.class);

			category = productCategoryResponseEntity.getBody();
			log.debug("Returning list of  Product Offerings");
		} catch (BizCompServiceException ex) {
			log.error(ex.getMessage(), ex);
			throw ex;
		}
		return category;
	}

	@Override
	public Category patchCategory(Map<String, Object> pathParams, Category category) {
		Category categoryObject = null;

		try {
		HttpEntity<Category> productOfferingEntity = new HttpEntity<>(category);
		log.info("Patch URI   " + getURI(pathParams, null));
		restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory());
		ResponseEntity<Category> prodOfferingRes = restTemplate.exchange(getURI(pathParams, null),
				HttpMethod.PATCH, productOfferingEntity, Category.class);
		if (prodOfferingRes.getStatusCode() == HttpStatus.OK && prodOfferingRes.getBody() != null) {
			categoryObject = prodOfferingRes.getBody();
		}
		return categoryObject;
		}catch(BizCompServiceException se) {
			log.error(se.getMessage(), se);
			throw se;
		}
	}
	
	private String getURI(Map<String, Object> pathParams, Map<String, Object> queryParams) {
		UriComponentsBuilder builder = null;
		try {
			StringBuilder url = new StringBuilder(env.getProperty("prodoffer.bizcomp.url") + ":"
					+ env.getProperty("prodoffer.bizcomp.port") + "/" + Constants.PRODSPECSERVIC);
			if (null != pathParams && !pathParams.isEmpty()) {
				log.debug("Pathparameter parameter is: " + pathParams);
				for (Map.Entry<String, Object> entry : pathParams.entrySet()) {
					url.append("/" + entry.getValue());
				}
			}
			builder = UriComponentsBuilder.fromHttpUrl(url.toString());
			if (null != queryParams && !queryParams.isEmpty()) {
				log.debug("Query parameter is: " + queryParams);
				for (Map.Entry<String, Object> entry : queryParams.entrySet()) {
					builder.queryParam(entry.getKey(), entry.getValue());
				}
			}
		} catch (RestUrlFormationException se) {
			log.error(se.getMessage(), se);
			throw se;
		}
		log.debug("Returning the URI which is generated by getUri method... URI: " + builder.toUriString());
		return builder.toUriString();
	}


}
